/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit'
import type Parcel from '@/app/types/ParcelType'

/* Instruments */
import { getAllParcelsInfoAsync, getDeliveredParcelsInfoAsync, getReceivedParcelsInfoAsync, addParcelAsync } from './thunkActions'
import ParcelTrack from '@/app/types/ParcelTrackType'

const initialState: ParcelSliceState = {
    value: {
        parcels: [],
        deliveredParcels: [],
        receivedParcels: []
    },
    status: 'idle',
}

export const parcelSlice = createSlice({
    name: 'parcel',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getAllParcelsInfoAsync.pending, (state) => {
                state.status = 'loading'
            })
            .addCase(getAllParcelsInfoAsync.fulfilled, (state, action: PayloadAction<Parcel[]>) => {
                state.status = 'idle'
                state.value.parcels = action.payload
            })
            .addCase(getDeliveredParcelsInfoAsync.pending, (state) => {
                state.status = 'loading'
            })
            .addCase(getDeliveredParcelsInfoAsync.fulfilled, (state, action: PayloadAction<ParcelTrack[]>) => {
                state.status = 'idle'
                state.value.deliveredParcels = action.payload
            })
            .addCase(getReceivedParcelsInfoAsync.pending, (state) => {
                state.status = 'loading'
            })
            .addCase(getReceivedParcelsInfoAsync.fulfilled, (state, action: PayloadAction<ParcelTrack[]>) => {
                state.status = 'idle'
                state.value.receivedParcels = action.payload
            })
            .addCase(addParcelAsync.pending, (state) => {
                state.status = 'loading'
            })
            .addCase(addParcelAsync.fulfilled, (state, action: PayloadAction<any>) => {
                state.status = 'idle'
                state.value.parcels = [action.payload, ...state.value.parcels]
            })
    },
})

/* Types */
export interface ParcelSliceState {
    value: {
        parcels: Parcel[],
        deliveredParcels: ParcelTrack[],
        receivedParcels: ParcelTrack[]
    }
    status: 'idle' | 'loading' | 'failed'
}
