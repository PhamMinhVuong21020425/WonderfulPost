/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit'
import type User from '@/app/types/UserType'
import type Office from '@/app/types/OfficeType'

/* Instruments */
import { getAllLeadersInfoAsync, getSubOfficesInfoAsync } from './thunkActions'

const initialState: LeaderSliceState = {
    value: [] as User[],
    status: 'idle',
}

export const leaderSlice = createSlice({
    name: 'leader',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getAllLeadersInfoAsync.pending, (state) => {
                state.status = 'loading'
            })
            .addCase(getAllLeadersInfoAsync.fulfilled, (state, action: PayloadAction<User[]>) => {
                state.status = 'idle'
                state.value = action.payload
            })
            .addCase(getSubOfficesInfoAsync.pending, (state) => {
                state.status = 'loading'
            })
            .addCase(getSubOfficesInfoAsync.fulfilled, (state, action: PayloadAction<Office[]>) => {
                state.status = 'idle'
                state.value.forEach((item, index) => {
                    if (item.office && item.office.id === action.payload[0]?.reference_id) {
                        item.office.branches = action.payload
                        const newItem = { ...item }
                        state.value[index] = newItem
                    }
                })
            })
    },
})

/* Types */
export interface LeaderSliceState {
    value: User[]
    status: 'idle' | 'loading' | 'failed'
}
